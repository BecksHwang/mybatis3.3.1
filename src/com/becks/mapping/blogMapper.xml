<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的
例如namespace="com.becks.mapping.blogMapper"就是com.becks.mapping(包名)+blogMapper(blogMapper.xml文件去除后缀)
 -->
<mapper namespace="com.becks.mapping.blogMapper">
	<!-- 根据id去查询blog对象，这是一个错误的例子，无法得到blog对象
		 因为实体类的属性名和数据库字段名对象不上
	 -->
	<select id="getBlogByIdWrong" parameterType="int" resultType="Blog">
		select * from blog where blog_id=#{id}
	</select>
	
	<!-- 根据id去查询blog对象，这是一个正确的例子，可以得到blog对象
		 因为我们将查询的字段名都起一个和实体类属性名相同的别名，这样实体类的属性名和查询结果中的字段名就可以一一对应上了
	 -->
	<select id="getBlogById" parameterType="int" resultType="Blog">
		select blog_id id,blog_name name,user_id userId from blog where blog_id=#{id}
	</select>

	<!-- 根据id查询得到一个order对象，这个也可以得到blog对象，
         因为我们通过<resultMap>映射实体类属性名和表的字段名一一对应关系 
     -->
	<select id="getBlogByIdResultMap" parameterType="int" resultMap="blogResultMap">
		select * from blog where blog_id=#{id}
	</select>

	<!-- 通过<resultMap>映射实体类属性名和表的字段名对应关系 -->
	<resultMap type="Blog" id="blogResultMap">
		<!-- 用id属性来映射主键字段 -->
		<id property="id" column="blog_id"/>
		<!-- 用result属性来映射非主键字段 -->
		<result property="name" column="blog_name"/>
		<result property="userId" column="user_id"/>
	</resultMap>
	
	<!-- 根据博客id去查询博客，并带出博客对应的用户信息
		 方法一：联表查询
		 select * from blog b,user u where b.user_id=u.id and b.blog_id=1;
		 
		 方法二：执行两次查询
		 select * from blog where blog_id=1; //对应user_id=1
		 select * from user where id=1;
	 -->
	 
	 <!-- 方法一：嵌套结果：使用嵌套结果映射来处理重复的联合结果的子集
          封装联表查询的数据(去除重复的数据) 
	 	  select * from blog b,user u where b.user_id=u.id and b.blog_id=1;
	  -->
	 <select id="getBlog" parameterType="int" resultMap="blogResultMap2">
	 	select * from blog b,user u where b.user_id=u.id and b.blog_id=#{id}
	 </select>
	 
	 <resultMap type="Blog" id="blogResultMap2">
	 	<id property="id" column="blog_id"/>
	 	<result property="name" column="blog_name"/>
	 	<result property="userId" column="user_id"/>
	 	<association property="user" javaType="User">
	 		<id property="id" column="id"/>
	 		<result property="name" column="name"/>
	 		<result property="age" column="age"/>
	 	</association>
	 </resultMap>
	 
	 <!-- 方法二：嵌套查询：通过执行另外一个SQL映射语句来返回预期的复杂类型
	 	  select * from blog where blog_id=1; //对应user_id=1
		  select * from user where id=1; 
	  -->
	  <select id="getBlog2" parameterType="int" resultMap="blogResultMap3">
	  	select * from blog where blog_id=#{id};
	  </select>
	 <!-- 使用resultMap映射实体类和字段之间的一一对应关系 -->
	  <resultMap type="Blog" id="blogResultMap3">
	  	<id property="id" column="blog_id"/>
	 	<result property="name" column="blog_name"/>
	 	<result property="userId" column="user_id"/>
	 	<association property="user" column="user_id" select="getUser"></association>
	  </resultMap>
	 
	  <select id="getUser" parameterType="int" resultType="User">
	  	select * from user where id=#{id}
	  </select>
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
</mapper>